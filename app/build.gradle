buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath "com.newrelic.agent.android:agent-gradle-plugin:5.+"
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'android'
apply plugin: 'newrelic'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

// Pulling app ids and API keys from the app/secrets.properties file
Properties secrets = new Properties();
FileInputStream fis = new FileInputStream("app/secrets.properties");
secrets.load(fis);

def FABRIC_API_KEY = secrets.getProperty("FabricApiKey") ?: "Need to set FabricApiKey in app/secrets.properties";
def FACEBOOK_APP_ID_PROD = secrets.getProperty("FacebookAppIdProduction") ?: "Need to set FacebookAppIdProduction in app/secrets.properties";
def FACEBOOK_APP_ID_DEBUG = secrets.getProperty("FacebookAppIdDebug") ?: "Need to set FacebookAppIdDebug in app/secrets.properties";
def PARSE_APP_ID = secrets.getProperty("ParseAppId") ?: "Need to set ParseAppId in app/secrets.properties";
def PARSE_CLIENT_KEY = secrets.getProperty("ParseClientKey") ?: "Need to set ParseClientKey in app/secrets.properties";
def NEW_RELIC_APP_TOKEN = secrets.getProperty("NewRelicAppToken") ?: "Need to set NewRelicAppToken in app/secrets.properties";
def NORTHSTAR_API_KEY_DEBUG = secrets.getProperty("NorthstarApiKeyDebug") ?: "Need to set NorthstarApiKeyDebug in app/secrets.properties";
def NORTHSTAR_API_KEY_THOR = secrets.getProperty("NorthstarApiKeyThor") ?: "Need to set NorthstarApiKeyThor in app/secrets.properties";
def NORTHSTAR_API_KEY_PROD = secrets.getProperty("NorthstarApiKeyProduction") ?: "Need to set NorthstarApiKeyProduction in app/secrets.properties";

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    dexOptions {
        javaMaxHeapSize "2048M"
    }
    defaultConfig {
        applicationId "org.dosomething.letsdothis"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 2
        versionName "1.1.0"
        resValue "string", "fabric_api_key", FABRIC_API_KEY
        resValue "string", "facebook_app_id", FACEBOOK_APP_ID_PROD
        resValue "string", "parse_app_id", PARSE_APP_ID
        resValue "string", "parse_client_key", PARSE_CLIENT_KEY
        resValue "string", "new_relic_app_token", NEW_RELIC_APP_TOKEN
        resValue "string", "northstar_api_key", NORTHSTAR_API_KEY_PROD

        // Enabling multidex support.
        multiDexEnabled true

        // React Native HACK: exclude 64-bit binaries
        // @see https://github.com/facebook/react-native/issues/2814
        // @see https://corbt.com/posts/2015/09/18/mixing-32-and-64bit-dependencies-in-android.html
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(LDT_RELEASE_STORE_FILE)
            storePassword LDT_RELEASE_STORE_PASSWORD
            keyAlias LDT_RELEASE_KEY_ALIAS
            keyPassword LDT_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            debuggable true
            resValue "string", "facebook_app_id", FACEBOOK_APP_ID_DEBUG
            resValue "string", "northstar_api_key", NORTHSTAR_API_KEY_DEBUG
        }
        internal {
            debuggable true
            signingConfig signingConfigs.debug
            resValue "string", "facebook_app_id", FACEBOOK_APP_ID_DEBUG
            resValue "string", "northstar_api_key", NORTHSTAR_API_KEY_THOR
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        packagingOptions {
            exclude 'META-INF/ASL2.0'
            exclude 'META-INF/DEPENDENCIES.txt'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/dependencies.txt'
            exclude 'META-INF/LGPL2.1'

            // React Native HACK: excluding 64-bit binaries
            exclude "lib/arm64-v8a/librealm-jni.so"
        }
    }
}

dependencies {
    compile 'com.parse.bolts:bolts-android:1.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.google.android.gms:play-services-analytics:8.1.0'
    compile 'de.greenrobot:eventbus:2.2.1'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    provided 'com.intellij:annotations:9.0.4'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.facebook.android:facebook-android-sdk:4.7.0'
    compile 'com.facebook.react:react-native:+' // From node_modules
    compile 'com.newrelic.agent.android:android-agent:5.+'
    compile 'com.soundcloud.android:android-crop:1.0.1@aar'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
}

// Selecting which google-services.json file to use for Google Analytics configuring
// Credit to: https://medium.com/@ZakTaccardi/automatic-per-variant-google-services-json-configurations-with-gradle-d3d3e40abc0e
task useDebugGoogleServices(type: Copy) {
    description = 'Copies debug version of google-services.json into app/'
    from "ga/debug"
    include "google-services.json"
    into "."
}

task useReleaseGoogleServices(type: Copy) {
    description = 'Copies release version of google-services.json into app/'
    from "ga/release"
    include "google-services.json"
    into "."
}

afterEvaluate {
    processDebugGoogleServices.dependsOn useDebugGoogleServices
    processInternalGoogleServices.dependsOn useDebugGoogleServices
    processReleaseGoogleServices.dependsOn useReleaseGoogleServices
}
